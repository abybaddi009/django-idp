"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from django.urls import reverse_lazy

import saml2
from saml2.saml import NAMEID_FORMAT_EMAILADDRESS, NAMEID_FORMAT_UNSPECIFIED
from saml2.sigver import get_xmlsec_binary

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-1h8inh6nt$z4=xoff1j^fg8&#99=su_nk#d3799kknemyh5va5"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
LIBS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "djangosaml2idp",
]

INTERNAL_APPS = [
    "authentication",
]

INSTALLED_APPS = LIBS + THIRD_PARTY_APPS + INTERNAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "authentication.User"

HOST_URL = os.getenv("HOST_URL", "http://localhost:8000/")
LOGIN_URL = "/authentication/login/"
LOGIN_REDIRECT_URL = "/authentication/profile/"

IDP_BASE_URL = HOST_URL + "idp/"

SAML_IDP_CONFIG = {
    "debug": DEBUG,
    "xmlsec_binary": get_xmlsec_binary(["/opt/local/bin", "/usr/bin"]),
    "entityid": IDP_BASE_URL + "metadata/",
    "description": "Example IdP setup",
    "service": {
        "idp": {
            "name": "Django localhost IdP",
            "endpoints": {
                "single_sign_on_service": [
                    (IDP_BASE_URL + "sso/post/", saml2.BINDING_HTTP_POST),
                    (IDP_BASE_URL + "sso/post/", saml2.BINDING_HTTP_REDIRECT),
                    (IDP_BASE_URL + "sso/redirect/", saml2.BINDING_HTTP_POST),
                    (IDP_BASE_URL + "sso/redirect/", saml2.BINDING_HTTP_REDIRECT),
                ],
                "single_logout_service": [
                    (IDP_BASE_URL + "slo/post/", saml2.BINDING_HTTP_POST),
                    (IDP_BASE_URL + "slo/redirect/", saml2.BINDING_HTTP_REDIRECT),
                ],
            },
            "name_id_format": [NAMEID_FORMAT_EMAILADDRESS, NAMEID_FORMAT_UNSPECIFIED],
            "sign_response": True,
            "sign_assertion": True,
            "want_authn_requests_signed": True,
        },
        "sp": {
            "name": "Example SP",
            "endpoints": {
                "assertion_consumer_service": ["http://localhost:8080/realms/wovo/broker/wovo/endpoint"],
            },
        }
    },
    # Signing
    "key_file": os.path.join(BASE_DIR.absolute(), "certificates/private.key"),
    "cert_file": os.path.join(BASE_DIR.absolute(), "certificates/public.cert"),
    # Encryption
    "encryption_keypairs": [
        {
            "key_file": os.path.join(BASE_DIR.absolute(), "certificates/private.key"),
            "cert_file": os.path.join(BASE_DIR.absolute(), "certificates/public.cert"),
        }
    ],
    "valid_for": 3650 * 24,
}
